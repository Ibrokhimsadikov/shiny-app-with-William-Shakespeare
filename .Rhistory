merchant <- read.table("~/Desktop/3/data/merchant.txt", header=TRUE, quote="\"")
View(merchant)
library(readr)
romeo <- read_csv("data/romeo.txt")
View(romeo)
library(readr)
summer <- read_csv("data/summer.txt")
View(summer)
library(readr)
merchant <- read_csv("data/merchant.txt")
View(merchant)
install.packages("quanteda")
shiny::runApp()
install.packages("wordcloud")
runApp()
install.packages("wordcloud2")
shiny::runApp()
runApp()
getDfm <- function(book, minterms, stem, punct, ngrams) {
# check that only one of three books is selected
if (!(book %in% books))
stop("Unknown book")
# looks in data sub-folder for the files (e.g., romeo.txt, merchant.txt, summer.txt)
text <- readLines(sprintf("./data/%s.txt", book), encoding="UTF-8")
# could also pass text column of dataframe instead
myCorpus <- corpus(text)
# if... else if statement depending on
if(ngrams == "unigram"){
ng = 1
}else if(ngrams == "both"){
ng = 1:2
}else if(ngrams == "bigram"){
ng = 2
}
dfm(myCorpus, remove = stopwords('english'),
remove_punct = punct, stem = stem, ngrams = ng) %>%
dfm_trim(min_termfreq = minterms, verbose = FALSE)
}
getDfm <- function(book, minterms, stem, punct, ngrams) {
# check that only one of three books is selected
if (!(book %in% books))
stop("Unknown book")
# looks in data sub-folder for the files (e.g., romeo.txt, merchant.txt, summer.txt)
text <- readLines(sprintf("./data/%s.txt", book), encoding="UTF-8")
# could also pass text column of dataframe instead
myCorpus <- corpus(text)
# if... else if statement depending on
if(ngrams == "unigram"){
ng = 1
}else if(ngrams == "both"){
ng = 1:2
}else if(ngrams == "bigram"){
ng = 2
}
dfm(myCorpus, remove = stopwords('english'),
remove_punct = punct, stem = stem, ngrams = ng) %>%
dfm_trim(min_termfreq = minterms, verbose = FALSE)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("devtools")
devtools::install_github("rstudio/rsconnect", ref='737cd48')
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
